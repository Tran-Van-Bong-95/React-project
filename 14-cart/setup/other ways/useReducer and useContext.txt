
// index.js
import './App.css' 
import App from './App'
import {AppContext} from './context'
import React from 'react'
import ReactDOM from 'react-dom'

ReactDOM.render(<React.StrictMode>
	<AppContext>
	<App/>
	</AppContext>
	<React.StrictMode/>,
	document.getElementById('root'))



// App.js
import React from 'react'
import CartContainer from './CartContainer'
import Navbar from './Navbar'

function App(){

return (
	<App>
	<Navbar/>
	<CartContainer/>
	<App/>
)

}
export default App.js


// context.js
import React, {useState, useEffect, useContext, useReducer} from 'react'
import reducer from './reducer'
import cartItems from './data'
const myContext = useContext()

const initalState = {
total: 0,
totalPrice: 0,
cart: cartItems,
loading: false
}

function AppContext ({children}) {



const [state, dispatch] = useReducer(reducer, initalState)
const remove = (id) => {
	dispatch('remove', payload: id)
}

  const clearCart = () => {
    dispatch({ type: 'CLEAR_CART' })
  }


const fetchAPI = () => {
	const response 	= 	await fetch(url)
	const data 	= 	await response.json()		
	dispatch('Loading')
	dispatch('getData', payload: data)
}

useEffect (() => {
	fetchAPI()
}, [])

useEffect(() => {
    dispatch({ type: 'GET_TOTALS' })
  }, [state.cart])

const toggleAmount = (id, type) => {
    dispatch({ type: 'TOGGLE_AMOUNT', payload: { id, type } })
  }


return <myContext.Provider value = {{

	...state,
	getTotals,
	toggelButton,
	remove
	}}
	>
	{children}
	</myContext.Provider>
)
}
export {AppContainer, myContext} 



// reducer.js
const reducer (state, action) {
try{

if(action.type = 'toggleButton'){

const newdata = state.cart.map((item) => {
	if(item.id === id) {
	if(type == 'increase'){
	item.amount += 1
	}
	
	if(type == 'decrease'){
	item.amount -= 1
	}
}
	return item
)).filter(item => item.amount !== 0)


}

return {...state, cart: newdata}
}


if(action.type = 'getTotals'){

	const {total, totalPrice} = state.cart.reduce((totalAll, item) => {
	const {amount, price} = item
	
	totalAll.total += amount
	totalAll.totalPrice += price*amount

	},

	{	total: 0,
		totalPrice: 0
	}
	)

	totalPrice = parseFloat(totalPrice.toFixed(2))

	return {...state, total, totalPrice}
}

}
Throw Error "no match type" 

}

// Navbar.js 
import React from 'react'
import {myContext} from './context'


function Navbar (){
// context
const {total} = useContext(myContext)
return (
<>
	<div> useReducer  <span> {total} </span> </div>
</>
)
}

export default Navbar.js


// CartContainer.js

// CartItem.js

