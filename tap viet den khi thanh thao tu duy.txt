// App.js 

import React, {Component} from 'react'
import Table from './Table'
import Form from './Form'

// viết theo ý hiểu của mình khi nào thành công thì thôi 

class App extends Component {

state = {
	character: [];
}

// vì có 2 component nhỏ nên ta sẽ viết 2 hàm 
// 1. Table đó là remove 
// 2. viet ham update data 
 
// removeCharacterData 

removeCharacterData (index) {
// const character = this.state.character;
const {character} = this.state;
setState({
character: character.filter((item, id) => id !== index;
})

}

// character ở đây là 1 object , update giá trị của state of App.js through Form.js 
handleSubmit(character) {

return this.setState({character: [...this.state.character, character]}); 
}




render () {
	const {character} = this.state;
return (
	 <h1>React Tutorial</h1>
         <p>Add a character with a name and a job to the table.</p>

	<Table characterData = {character}  removeCharacterData = {this.removeCharacterData}/>

	 <h3>Add New</h3>

	<Form handleSubmit = {this.handleSubmit}/>

)

}
}


// Table.js 

const TableHeader () {
 return (
 <thead>
            <tr>
                <th>Name</th>
                <th>Job</th>
                <th>Remove</th>
            </tr>
        </thead>

)

}


const TableBody (props) {

const rows = props.characterData.map((row, index) 
=> {

	return (
	  <tr key={index}>
                <td>{row.name}</td>
                <td>{row.job}</td>
                <td><button onClick={() => props.removeCharacter(index)}>Delete</button></td>
          </tr>

	)
	})

 return <tbody>{rows}</tbody>;

   }


const Table (props) {

const { characterData, removeCharacter } = props;
return (
	 <table>
                <TableHeader />
                <TableBody characterData={characterData} removeCharacter={removeCharacter} />
            </table>

)
}



// Form.js

class Form extends Component {
initialState = {
	name: '';
	job: '';
}

state = this.initialState;

// update the value of state để truyền xuống hàm bên dưới 	
handleChange(event) {
const {name, value} = event.target;

// dựa vào giá trị name và value ở trên ta thiết lập giá trị của state 
setState({ 
[name]: value;
 })
}


// mình sẽ dùng onClick()  để gọi hàm này 
onSubmitForm(event) {
event.preventDefault();

// thiết lập giá trị cho object state của App.js với sự thay đổi 
this.props.handleSubmit(this.state);

// thiết lập lại giá trị state của Form về giá trị ban đầu 
this.setState(this.initialState);
}


render() {

const {name, job} = this.state;
return (

<form onSubmit =  {this.onSubmitForm}>

<lable> Name  </lable>

<input
type="text" 
id = 'name',
name = 'name'
value = {name}
onChange = {this.handleChange}
/>

<lable> Job  </lable>

<input
type="text" 
id = 'name',
name = 'job'
value = {name}
onChange(this.handleChange)
/> 

<button type="submit">
Submit
</button>

</form>

)
}


}




















